Nice Intro to Covnets:  https://adeshpande3.github.io/adeshpande3.github.io/A-Beginner's-Guide-To-Understanding-Convolutional-Neural-Networks-Part-1/

Weights Initialization: cs231n.github.io/neural-networks-2/#init

Normalizing and Image: http://stackoverflow.com/questions/29853497/normalization-of-an-image

Notes on Activation Functions: http://stats.stackexchange.com/questions/115258/comprehensive-list-of-activation-functions-in-neural-networks-with-pros-cons
http://cs231n.github.io/neural-networks-1/#actfun

Tensorflow Library for Flatten: https://www.tensorflow.org/api_docs/python/tf/contrib/layers/flatten

Covnet Architecture: http://cs231n.github.io/convolutional-networks/#architectures

Regularization: http://cs231n.github.io/neural-networks-2/#reg


Standard Normalization Formula: https://wikimedia.org/api/rest_v1/media/math/render/svg/ad23419556331501d554ed0685b13a526d99d446

I_n = (((I - min) * (newMax - newMin)) / (max - min)) + newMin, where newMax and newMin are the desired range of values you want to fit in, 
let's say I'd like my new values to be within range(0, 1) then newMax=1 and newMin=0.
